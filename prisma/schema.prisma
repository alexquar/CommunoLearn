// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}



datasource db {
    provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}


// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    todos         Todo[] 

    Meetings Meeting[]

    OwnedCommunities Community[] @relation("CreatedByCommunity")

    OwnedProjects Project[] @relation("createdByProject")

    Projects Project[] @relation("ProjectMembers")

    Communities Community[] @relation("CommunityMembers")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Todo {
    id        Int      @id @default(autoincrement())
    title     String
    content  String?
    done      Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    createdBy  User   @relation(fields: [userId], references: [id])
    userId     String
    stage     Stage @default(idea)

    Project Project @relation(fields: [projectId], references: [id])
    projectId Int

}

model Community {
    createdBy  User   @relation("CreatedByCommunity", fields: [userId], references: [id])
    id        Int      @id @default(autoincrement())
    name      String @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId     String
    projects     Project[] @relation()
    meetings Meeting[]  @relation()
    members User[] @relation("CommunityMembers")
    ownerEmail String?
    password String?
    aboutCommunity String
    locationCommunity String
    sloganCommunity String
    communityType String
    private Boolean @default(false)
    numberOfMembers Int
}
model Meeting {
    id        Int      @id @default(autoincrement())
    title     String
    content   String?
    meetingTime DateTime
    meetingLocationOrLink String
    online Boolean @default(false)
    inPerson Boolean @default(true)
    meetingDocuments String[]
    done      Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    createdBy  User   @relation(fields: [userId], references: [id])
    userId     String
    stage     Stage @default(idea)

    AssociatedCommunity Community @relation(fields: [AssociatedCommunityId], references: [id])
    AssociatedCommunityId Int

    AssociatedProject Project @relation(fields: [AssociatedProjectId], references: [id])
    AssociatedProjectId Int
}

model Project {
    id        Int      @id @default(autoincrement())
    title     String
    description   String?
    endDate DateTime
    done      Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    createdBy  User   @relation("createdByProject", fields: [userId], references: [id])
    projectMembers User[] @relation("ProjectMembers")
    userId     String
    stage     Stage @default(idea)

    todos    Todo[]

    Meetings Meeting[]



    associatedCommunityId Int
    AssociatedCommunity Community @relation(fields: [associatedCommunityId], references: [id])
}

//enum of all project stages
enum Stage {
    done
    onHold
    inProgress
    planning
    idea
}
