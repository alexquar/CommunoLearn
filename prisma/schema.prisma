// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}



datasource db {
    provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}


model User {
    id            String    @id @default(cuid())
    email         String   @unique
    dateOfBirth   DateTime?
    location      location @default(Canada)
    firstName      String @default(" ")
    lastName      String @default(" ")
    aboutMe       String?
    image         String?

    createdTodos         Todo[] 

    Meetings Meeting[]

    OwnedCommunities Community[] @relation("CreatedByCommunity")

    OwnedProjects Project[] @relation("createdByProject")

    Projects Project[] @relation("ProjectMembers")

    Communities Community[] @relation("CommunityMembers")

    Comments Comment[] @relation("commentedBy")

    messages Message[] @relation("messageSentBy")


    assignedTodos Todo[] @relation("assignedUser")

    Conversation Conversation[]
}

model VerificationToken {
    identifier String 
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Todo {
    id        Int      @id @default(autoincrement())
    title     String
    content  String
    done      Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    completionDate DateTime
    createdBy  User   @relation(fields: [userId], references: [id])
    userId     String
    stage     Stage @default(idea)

    assignedUser User? @relation("assignedUser", fields: [assignedUserId], references: [id])
    assignedUserId String?

    Project Project @relation(fields: [projectId], references: [id])
    projectId Int

@@unique([title, projectId])
}

model Community {
    createdBy  User   @relation("CreatedByCommunity", fields: [userId], references: [id])
    id        Int      @id @default(autoincrement())
    name      String @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId     String
    projects     Project[]
    meetings Meeting[]
    members User[] @relation("CommunityMembers")
    ownerEmail String?
    password String?
    aboutCommunity String
    locationCommunity String
    sloganCommunity String
    communityType String
    private Boolean @default(false)
    numberOfMembers Int
}
model Meeting {
    id        Int      @id @default(autoincrement())
    title     String
    content   String
    meetingTime DateTime
    meetingLocationOrLink String
    inPerson Boolean @default(false)
    meetingDocuments String[]
    done      Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    createdBy  User   @relation(fields: [userId], references: [id])
    userId     String

    AssociatedCommunity Community @relation(fields: [AssociatedCommunityId], references: [id])
    AssociatedCommunityId Int

    AssociatedProject Project @relation(fields: [AssociatedProjectId], references: [id])
    AssociatedProjectId Int
}

model Project {
    id        Int      @id @default(autoincrement())
    title     String
    description   String?
    endDate DateTime
    done      Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    createdBy  User   @relation("createdByProject", fields: [userId], references: [id])
    projectMembers User[] @relation("ProjectMembers") 
    userId     String
    stage     Stage @default(idea)

    todos    Todo[]

    Meetings Meeting[]



    associatedCommunityId Int
    AssociatedCommunity Community @relation(fields: [associatedCommunityId], references: [id])
    @@unique([title, associatedCommunityId])
}

//enum of all project stages
enum Stage {
    done
    onHold
    inProgress
    planning
    idea
}

enum commentCategory {
    suggestion
    update 
    //more to come
}

enum location {
    Canada
    USA
    Mexio
    France 
    Germany
    //more to come 
}

model Comment{
    id String @id @default(uuid())
    text String
    commentedBy User @relation("commentedBy", fields:[userId], references: [id])
    userId String
    commentCategory commentCategory
    //will need to link to some time of content tbd
}

model Message{
    id String @id @default(uuid())
    text String 
    sentTime DateTime @default(now())
    modifiedTime DateTime @updatedAt
    from User @relation("messageSentBy", fields:[fromId], references: [id])
    fromId String

    Conversation Conversation @relation(fields: [conversationId], references: [id])
    conversationId String
}

model Conversation{
    id String @id @default(uuid())
    participants User[]
    messages Message[]
}